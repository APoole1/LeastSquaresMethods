import sys
import time
import os

import numpy
import matplotlib.pyplot as plt

import GaussNewton
import Newton
import Functions

"""
Function to randomly generate count pieces of data, between min and max on the x-axis. The y-values
are generated by applying func with consts on the x-values, and then adding a normal with the specified variance
"""
def GetRandomData(func, consts, min = 0, max = 30, count = 100, variance = 1):
    xs = numpy.random.uniform(min, max, count)
    ys = func.f(xs, consts) + numpy.random.normal(0, variance, 100)
    return (xs, ys)

"""
Used to compare the runtimes of the Guass-Newton and Newton methods. The parameters are the same as the 'GetRandomData' and 'RunAndPlot' functions,
except that you can specify the number of repeats to do
"""
def TimeFunctions(func, consts, initial = None, min = 0, max = 30, count= 100, variance = 1, iterations = 10, precision = 0.01, repeats = 10):
    # Time for Gauss-Newton method
    gntime = 0
    # Time for Newton method
    ntime = 0
    for i in range(repeats):
        (xs, ys) = GetRandomData(func, consts, min, max, count, variance)
        start = time.clock()
        GaussNewton.Run(func, xs, ys, initial, iterations, precision)
        gntime += time.clock() - start
        start = time.clock()
        Newton.Run(func, xs, ys, initial, iterations, precision)
        ntime += time.clock() - start

        # Windows only
        os.system('cls')
        print(str(i) + " done")

    print("Gauss-Newton took: " + str(gntime))
    print("Newton took: " + str(ntime))

"""
Used to plot the xs and ys, with a line drawn using func with consts. Consts should be calculated with the Newton or Gauss-Newton algorithm
"""
def PlotData(func, consts, xs, ys):
    f = func.f
    xs2 = numpy.linspace(xs.min()-1, xs.max()+1, 50)
    ys2 = f(xs2, consts)

    plt.plot(xs, ys, 'o', xs2, ys2)
    plt.xlim([xs.min(), xs.max()])
    plt.ylim([ys.min(), ys.max()])
    plt.show()

"""
Creates random data and then plots it using RunAndPlot.
"""
def RunAndPlotRandom(func, consts, initial = None, min = 0, max = 30, count= 100, variance = 1, iterations = 10, precision = 0.01, method = 'GN'):
    (xs, ys) = GetRandomData(func, consts, min, max, count, variance)
    RunAndPlot(func, xs, ys, initial, iterations, precision, method)

"""
Runs an algorithm against (xs, ys) to determine the constants for func. For better results, specify an initial guess.
The method parameter is used to specify which method to use. 'GN' is used for the Gauss-Newton method, 'N' is used for the Newton method and '*' is used for both.
It will return a tuple of the result and co-efficient of determination, unless '*' is specified, in which case it will return an array of both results
"""
def RunAndPlot(func, xs, ys, initial = None, iterations = 10, precision = 0.01, method = 'GN'):
    if method is 'GN' or method is '*':
        (result, CoD) = GaussNewton.Run(func, xs, ys, initial, iterations, precision)
    elif method is 'N':
        (result, CoD) = Newton.Run(func, xs, ys, initial, iterations, precision)
    
    try:
        print("Constants = " + str(result))
        print("CoD = " + str(CoD))
        PlotData(func, result, xs, ys)
    except:
        input("No results found. Press Enter to continue")

    # If method is '*', repeat with Newton
    if method is '*':
        (r,c) = RunAndPlot(func, xs, ys, initial, iterations, precision, method = 'N')
        return [(result, CoD), (r, c)]
    else:
        return (result, CoD)

"""
Function to test both methods against several equations
"""
def RunTests():
    RunAndPlotRandom(Functions.LINEAR, [-1, 5], method = '*')

    RunAndPlotRandom(Functions.EXPONENTIAL, [0.4, 0.15], method = '*')

    RunAndPlotRandom(Functions.BIOLOGY, [0.362, 0.556], [0.5, 0.5], variance = 0.01, method = '*')

    RunAndPlotRandom(Functions.BIOLOGY_WITH_LINEAR, [4., 3., 1., -2], [3., 3., 1., 1.], -5, count = 100, variance = 1., precision = 0.0001, method = '*')
    
    RunAndPlotRandom(Functions.Quadratic, [1, -2, 3], [0.5, 1, 1], variance = 10., iterations = 50, method = '*')


def RunTimeTests():
    TimeFunctions(Functions.LINEAR, [1, -2], [1, 1], repeats = 100)
    input("Press Enter to continue")
    TimeFunctions(Functions.Quadratic, [1, -2, 3], [0.5, 1, 1], repeats = 100)
    input("Press Enter to continue")
    TimeFunctions(Functions.BIOLOGY, [0.362, 0.556], [0.5, 0.5], repeats = 100)


RunTests()
RunTimeTests()